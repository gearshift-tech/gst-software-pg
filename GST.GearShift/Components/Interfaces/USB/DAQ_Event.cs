using System;
using System.Collections.Generic;
using System.Text;

namespace GST.Gearshift.Components.Interfaces.USB
{

  /// <summary>
  /// Class representing a DAQ event used to automate GearShift system
  /// </summary>
  [Serializable]
  public class DAQ_Event
  {

    /// <summary>
    /// Denotes the script line that this critical ID is generated by
    /// </summary>
    public TestScriptFrame mScriptLine = new TestScriptFrame();

    /// <summary>
    /// Packet ID characteristic for this critical ID
    /// </summary>
    public UInt32 mCriticalID = 0;

    /// <summary>
    /// Denotes if data should be put into the report at this ID
    /// </summary>
    public bool mAcquireData = false;

    /// <summary>
    /// Denotes if this is a gear change moment
    /// </summary>
    public bool mIsGearChange = false;

    /// <summary>
    /// Denotes if prompt should be displayed 
    /// </summary>
    public bool mDisplayPrompt = false;

    /// <summary>
    /// Denotes if it is the end of the test script
    /// </summary>
    public bool mEndOfTheScript = false;


    /// <summary>
    /// Denotes if it is the end of the test main loop
    /// </summary>
    public bool mEndOfMainLoop = false;

    /// <summary>
    /// Denotes if progress bar feedback is correct in this id
    /// </summary>
    public bool mProgressBarFb = false;

    public Measurement.ProgressBarEventAttributes mProgressBarFbAttr = new Measurement.ProgressBarEventAttributes();

    /// <summary>
    /// Denotes if gear change controls should be disabled at this moment
    /// </summary>
    public bool mGearLockOn = false;

    /// <summary>
    /// Denotes if gear change controls should be enabled at this moment
    /// </summary>
    public bool mGearLockOff = false;

    public bool mReLoop = false;

    public bool mSwitchGearUp = false;

  }
}
