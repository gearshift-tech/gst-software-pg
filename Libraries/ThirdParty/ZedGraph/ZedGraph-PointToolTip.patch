Index: ZedGraphControl.cs
===================================================================
RCS file: /cvsroot/zedgraph/source/ZedGraph/ZedGraphControl.cs,v
retrieving revision 3.81
diff -u -r3.81 ZedGraphControl.cs
--- ZedGraphControl.cs	19 Feb 2007 08:05:24 -0000	3.81
+++ ZedGraphControl.cs	21 Feb 2007 10:16:38 -0000
@@ -261,6 +261,13 @@
 		//private List<CurveItem> _selection = new List<CurveItem>();
 		private Selection _selection = new Selection();
 
+        /// <summary>
+        /// Store the last nearestObj for PointToolTip        
+        /// </summary>
+        /// <remarks>
+        /// This is needed to avoid the blinking of the ToolTip
+        /// </remarks>
+        private object _lastnearestObj = null;
 	#endregion
 
 	#region Fields: Buttons & Keys Properties
@@ -2556,7 +2563,7 @@
 					HandleZoomDrag( mousePt );
 			}
 		}
-
+        
 		private Point HandlePointValues( Point mousePt )
 		{
 			int iPt;
@@ -2565,81 +2572,94 @@
 
 			using ( Graphics g = this.CreateGraphics() )
 			{
+                if (_masterPane.FindNearestPaneObject(mousePt,
+                    g, out pane, out nearestObj, out iPt))
+                {
+                    
+                    if (nearestObj != _lastnearestObj)
+                    {
+                        _lastnearestObj = nearestObj;
+                        if (nearestObj is CurveItem && iPt >= 0)
+                        {
+                            CurveItem curve = (CurveItem)nearestObj;
+                            // Provide Callback for User to customize the tooltips
+
+                            string label = null;
+                            if (this.PointValueEvent != null)
+                            {
+                                label = this.PointValueEvent(this, pane, curve, iPt);
+                            }
+
+                            if (label != null)
+                            {
+                                if (label.Length > 0)
+                                {                                   
+                                    this.pointToolTip.SetToolTip(this, label);
+                                    this.pointToolTip.Active = true;
+                                }
+                                else
+                                    this.pointToolTip.Active = false;
+                            }
+                            else
+                            {
+
+                                if (curve is PieItem)
+                                {
+                                    this.pointToolTip.SetToolTip(this,
+                                        ((PieItem)curve).Value.ToString(_pointValueFormat));
+                                }
+                                //							else if ( curve is OHLCBarItem || curve is JapaneseCandleStickItem )
+                                //							{
+                                //								StockPt spt = (StockPt)curve.Points[iPt];
+                                //								this.pointToolTip.SetToolTip( this, ( (XDate) spt.Date ).ToString( "MM/dd/yyyy" ) + "\nOpen: $" +
+                                //								spt.Open.ToString( "N2" ) +
+                                //								"\nHigh: $" +
+                                //								spt.High.ToString( "N2" ) + "\nLow: $" +
+                                //								spt.Low.ToString( "N2" ) + "\nClose: $" +
+                                //								spt.Close.ToString
+                                //								( "N2" ) );
+                                //							}
+                                else
+                                {
+                                    PointPair pt = curve.Points[iPt];
+
+                                    if (pt.Tag is string)
+                                        this.pointToolTip.SetToolTip(this, (string)pt.Tag);
+                                    else
+                                    {
+                                        double xVal, yVal, lowVal;
+                                        ValueHandler valueHandler = new ValueHandler(pane, false);
+                                        if ((curve is BarItem || curve is ErrorBarItem || curve is HiLowBarItem)
+                                                && pane.BarSettings.Base != BarBase.X)
+                                            valueHandler.GetValues(curve, iPt, out yVal, out lowVal, out xVal);
+                                        else
+                                            valueHandler.GetValues(curve, iPt, out xVal, out lowVal, out yVal);
+
+                                        string xStr = MakeValueLabel(pane.XAxis, xVal, iPt,
+                                            curve.IsOverrideOrdinal);
+                                        string yStr = MakeValueLabel(curve.GetYAxis(pane), yVal, iPt,
+                                            curve.IsOverrideOrdinal);
+
+                                        this.pointToolTip.SetToolTip(this, "( " + xStr + ", " + yStr + " )");
+
+                                        //this.pointToolTip.SetToolTip( this,
+                                        //	curve.Points[iPt].ToString( this.pointValueFormat ) );
+                                    }
+                                }
+
+                                this.pointToolTip.Active = true;
+                            }
+                        }
+                        else
+                            this.pointToolTip.Active = false;
+                    }
+                }
+                else
+                {
+                    _lastnearestObj = null;
+                    this.pointToolTip.Active = false;
 
-				if ( _masterPane.FindNearestPaneObject( mousePt,
-					g, out pane, out nearestObj, out iPt ) )
-				{
-					if ( nearestObj is CurveItem && iPt >= 0 )
-					{
-						CurveItem curve = (CurveItem)nearestObj;
-						// Provide Callback for User to customize the tooltips
-						if ( this.PointValueEvent != null )
-						{
-							string label = this.PointValueEvent( this, pane, curve, iPt );
-							if ( label != null && label.Length > 0 )
-							{
-								this.pointToolTip.SetToolTip( this, label );
-								this.pointToolTip.Active = true;
-							}
-							else
-								this.pointToolTip.Active = false;
-						}
-						else
-						{
-
-							if ( curve is PieItem )
-							{
-								this.pointToolTip.SetToolTip( this,
-									( (PieItem)curve ).Value.ToString( _pointValueFormat ) );
-							}
-//							else if ( curve is OHLCBarItem || curve is JapaneseCandleStickItem )
-//							{
-//								StockPt spt = (StockPt)curve.Points[iPt];
-//								this.pointToolTip.SetToolTip( this, ( (XDate) spt.Date ).ToString( "MM/dd/yyyy" ) + "\nOpen: $" +
-//								spt.Open.ToString( "N2" ) +
-//								"\nHigh: $" +
-//								spt.High.ToString( "N2" ) + "\nLow: $" +
-//								spt.Low.ToString( "N2" ) + "\nClose: $" +
-//								spt.Close.ToString
-//								( "N2" ) );
-//							}
-							else
-							{
-								PointPair pt = curve.Points[iPt];
-
-								if ( pt.Tag is string )
-									this.pointToolTip.SetToolTip( this, (string)pt.Tag );
-								else
-								{
-									double xVal, yVal, lowVal;
-									ValueHandler valueHandler = new ValueHandler( pane, false );
-									if ( ( curve is BarItem || curve is ErrorBarItem || curve is HiLowBarItem )
-											&& pane.BarSettings.Base != BarBase.X )
-										valueHandler.GetValues( curve, iPt, out yVal, out lowVal, out xVal );
-									else
-										valueHandler.GetValues( curve, iPt, out xVal, out lowVal, out yVal );
-
-									string xStr = MakeValueLabel( pane.XAxis, xVal, iPt,
-										curve.IsOverrideOrdinal );
-									string yStr = MakeValueLabel( curve.GetYAxis( pane ), yVal, iPt,
-										curve.IsOverrideOrdinal );
-
-									this.pointToolTip.SetToolTip( this, "( " + xStr + ", " + yStr + " )" );
-
-									//this.pointToolTip.SetToolTip( this,
-									//	curve.Points[iPt].ToString( this.pointValueFormat ) );
-								}
-							}
-
-							this.pointToolTip.Active = true;
-						}
-					}
-					else
-						this.pointToolTip.Active = false;
-				}
-				else
-					this.pointToolTip.Active = false;
-
+                }
 				//g.Dispose();
 			}
 			return mousePt;

